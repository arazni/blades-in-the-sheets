@using Models.Characters
@using System.Diagnostics.CodeAnalysis
@using Models.Settings;
@using UI.Services
@inject SheetJank SheetJank

<MudStack Row="true">
	@if (IsFixMode)
	{
		<MudRating Size="Size.Small" @bind-SelectedValue="FixModeRating" MaxValue="Action.MaxRating" FullIcon="@Icons.Material.Filled.CheckBox" EmptyIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" Color="Color.Primary" aria-label="@RatingLabel" />
		<MudText>@ActionName</MudText>
	}
	else
	{
		if (CanLevelUp)
		{
			<MudIconButton Title="@LevelUpTitle" Variant="Variant.Filled" Size="Size.Small" Disabled="Action.HasMaxRating" Icon="@Icons.Material.Filled.Add" OnClick="LevelUp" Color="Color.Primary" aria-label="@LevelUpLabel" />
		}
		<MudText>@Text</MudText>
	}
</MudStack>

@code
{
	[Parameter, EditorRequired]
	public string AttributeName { get; set; } = string.Empty;

	[Parameter, EditorRequired]
	public TalentAttribute Attribute { get; set; } = TalentAttribute.Empty();

	[Parameter, EditorRequired]
	public string ActionName { get; set; } = string.Empty;

	[Parameter, EditorRequired]
	public TalentAction Action { get; set; } = TalentAction.Empty();

	[CascadingParameter(Name = "IsFixMode")]
	public bool IsFixMode { get; set; }

	string LevelUpTitle =>
		$"Level up {ActionName}";

	bool CanLevelUp =>
		Attribute!.Experience.CanLevelUp
		|| IsFixMode;

	string Text =>
		$"{Action.Rating} {ActionName}";

	void LevelUp()
	{
		if (!Attribute.LevelUp(ActionName))
			return;

		Notify();
	}

	int FixModeRating
	{
		get => Action.Rating;
		set
		{
			Action.Rating = value;
			Notify();
		}
	}

	void Notify() =>
		SheetJank.NotifyAttributeChanged(AttributeName);

	string RatingLabel =>
		$"Set {ActionName} rating";

	string LevelUpLabel =>
		$"Level up {ActionName}";
}
