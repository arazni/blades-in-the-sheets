@using Models.Characters
@using Models.Common;
@using Models.Settings;
@using UI.Conveniences
@using UI.Services
@using static Models.Characters.GearItem
@inject SheetJank SheetJank

<SheetCard @bind-IsFixMode="IsFixMode" Header="Gear">
	<div class="horizontal-stack jsb">
		<FluentRadioGroup Class="wrap-row jsb" @bind-Value="Gear.Commitment.Commitment">
			<FluentRadio Value="LoadCommitmentOption.None" Disabled="!RadioCommitmentsEnabled">@LoadCommitmentOption.None</FluentRadio>
			<FluentRadio Value="LoadCommitmentOption.Light" Disabled="!RadioCommitmentsEnabled">@((int)LoadCommitmentOption.Light) @LoadCommitmentOption.Light</FluentRadio>
			<FluentRadio Value="LoadCommitmentOption.Normal" Disabled="!RadioCommitmentsEnabled">@((int)LoadCommitmentOption.Normal) @LoadCommitmentOption.Normal</FluentRadio>
			<FluentRadio Value="LoadCommitmentOption.Heavy" Disabled="!RadioCommitmentsEnabled">@((int)LoadCommitmentOption.Heavy) @LoadCommitmentOption.Heavy</FluentRadio>
			<FluentRadio Value="LoadCommitmentOption.Encumbered" Disabled="!RadioCommitmentsEnabled">@((int)LoadCommitmentOption.Encumbered) @LoadCommitmentOption.Encumbered</FluentRadio>
		</FluentRadioGroup>
		@if (CommitmentLocked)
		{
			<FluentButton Class="min-button" Appearance="Appearance.Accent" OnClick="() => { ClearCommitments(); CommitmentLocked = false; }">Reset</FluentButton>
		}
		else
		{
			<FluentButton Class="min-button" IconStart="new Icons.Filled.Size20.LockClosed()" Appearance="Appearance.Accent" OnClick="() => CommitmentLocked = true">Commit</FluentButton>
		}
	</div>
	<h5>Loadout</h5>
	<div>
		@if (IsFixMode)
		{
			@foreach (var item in Gear.Loadout)
			{
				<FluentButton Class="gear-button" Appearance="Appearance.Accent" IconStart="new Icons.Filled.Size20.Eraser()" OnClick="() => UncommitGear(item)" Title="@CommitmentButtonLabel(item)">@item.Name (@item.Bulk)</FluentButton>
			}
		}
		else
		{
			foreach (var item in Gear.Loadout)
			{
				<p>@item.Name (@item.Bulk)</p>
			}
		}
	</div>
	@if (Gear.HasCommittedBandolier)
	{
		<p>Bandolier items: Alcahest, Binding Oil, Drift Oil, Drown Powder, Eyeblind Poison, Fire Oil, Grenade, Quicksilver, Skullfire Poison, Smoke Bomb, Spark (drug), Standstill Poison, Trance Powder</p>
	}
	<div class="row jsb">
		<h5>Available Gear</h5>
		<p>@BulkSynonym Remaining: @Character.AvailableBulk</p>
	</div>
	<div class="gear-row">
		@foreach (var item in Gear.UncommittedGear)
		{
			@if (!IsFixMode)
			{
				<FluentButton Class="gear-button" Appearance="Appearance.Outline" IconStart="new Icons.Regular.Size20.AddCircle()" Disabled="!Character.CanCommitGear(item) || !CommitmentLocked" OnClick="() => CommitGear(item)" Title="@($"Commit {@item.Display()}")">@item.Display()</FluentButton>
			}
			else
			{
				<FluentButton Class="gear-button" Appearance="Appearance.Accent" IconStart="new Icons.Filled.Size20.Delete()" OnClick="() => Gear.RemoveAvailableItem(item)" Title="@($"Delete {@item.Display()}")" BackgroundColor="var(--scare-color)">@item.Display()</FluentButton>
			}
		}
	</div>
	@if (IsFixMode)
	{
		<h5>Add Item</h5>
		<div class="wrap-row jsb" style="align-items: end;">
			<div>
				<FluentTextField @bind-Value=AddableItem.Name Label="Name" Id="gear-add-item-name" />
			</div>
			<div>
				<FluentNumberField Style="width: 60px;" @bind-Value=AddableItem.Bulk Label="@BulkSynonym" Id="gear-add-item-bulk" Step="1" Min="0" Max="9" />
			</div>
			<FluentButton Class="min-button" OnClick="AddItem" Disabled="!IsAddItemEnabled" Appearance="Appearance.Accent" IconStart="new Icons.Filled.Size20.AddCircle()" Title="Add new item">Add</FluentButton>
		</div>
	}
</SheetCard>
