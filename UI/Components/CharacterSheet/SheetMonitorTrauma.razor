@using Models.Characters;
@using UI.Services;
@inject SheetJank SheetJank;

<div class="vertical-stack">
	<h5>Stress</h5>
	<BladeRating @bind-Value="@Monitor.Stress.CurrentStress" MaxValue="@MonitorStress.MaxStress" CheckboxAriaLabelSuffix="Stress" />
	<div class="horizontal-stack jsb">
		<FluentSelect @bind-Value="SelectedTrauma" Items="TraumaOptions" Disabled="DisableTraumaSelect" Required="!DisableTraumaSelect" AriaLabel="Select Trauma" TOption="string" OptionDisabled="t => Monitor.Trauma.Traumas.Contains(t)" />
		<FluentButton IconStart="new Icons.Filled.Size20.Add()" Appearance="Appearance.Accent" Disabled="DisableAddTrauma" OnClick="AddTrauma" Class="min-button" Title="Add Trauma">Trauma</FluentButton>
	</div>
	@if (Monitor.Trauma.Traumas.Any())
	{
		<div class="horizontal-stack">
			@foreach (var option in Monitor.Trauma.Traumas)
			{
				@if (IsFixMode)
				{
					<FluentButton IconStart="new Icons.Filled.Size20.Delete()" Appearance="Appearance.Accent" Color="Color.Secondary" OnClick="(_ => RemoveTrauma(option))" Title="@RemoveTraumaAriaLabel(option)" BackgroundColor="var(--scare-color)">@option</FluentButton>
				}
				else
				{
					<p>@option</p>
				}
			}
		</div>
	}
</div>
