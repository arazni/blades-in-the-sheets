@using Models.Characters;
@using UI.Services;
@inject SheetJank SheetJank;

<div class="vertical-stack">
	<h5>Stress</h5>
	<FluentSlider @bind-Value="@Monitor.Stress.CurrentStress" Min="0" Max="@MonitorStress.MaxStress" Step="1" AriaLabel="Stress" Style="margin-bottom: 30px;">
		@foreach (var i in Enumerable.Range(0, MonitorStress.MaxStress + 1))
		{
			<FluentSliderLabel Position="i">@i</FluentSliderLabel>
		}
	</FluentSlider>
	<div class="horizontal-stack jsb">
		<FluentSelect @bind-Value="SelectedTrauma" Items="AvailableTraumaOptions" Disabled="DisableTraumaSelect" Required="!DisableTraumaSelect" AriaLabel="Select Trauma" TOption="string" />
		<FluentButton IconStart="new Icons.Filled.Size20.Add()" Appearance="Appearance.Accent" Disabled="DisableAddTrauma" OnClick="AddTrauma" Class="min-button" Title="Add Trauma">Trauma</FluentButton>
	</div>
	<div class="horizontal-stack">
		@foreach (var option in Monitor.Trauma.Traumas)
		{
			@if (IsFixMode)
			{
				<FluentButton IconEnd="new Icons.Filled.Size20.Delete()" Appearance="Appearance.Accent" Color="Color.Secondary" OnClick="(_ => RemoveTrauma(option))" Title="@RemoveTraumaAriaLabel(option)">@option</FluentButton>
			}
			else
			{
				<p>@option</p>
			}
		}
	</div>
</div>
