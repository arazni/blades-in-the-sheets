@using Models.Characters
@using Models.Settings;
@using Persistence.Json
@using UI.Conveniences
@using UI.Services
@implements IDisposable
@inject ILoader Loader
@inject SheetJank SheetJank

<SheetCard @bind-IsFixMode="IsFixMode" Header="@Playbook.Name.ToString()">
	<MudStack>
		<MudRating @bind-SelectedValue="Playbook.Experience.Points" MaxValue="Playbook.Experience.MaxPoints" FullIcon="@Icons.Material.Filled.CheckBox" EmptyIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" Color="Color.Primary" />
		<MudGrid>
			<MudItem xs="12" sm="9">
				<MudSelect @bind-Value="SelectedAbility" ToStringFunc="@converter">
					@foreach (var ability in LearnableAbilities)
					{
						<MudSelectItem Value="ability" />
					}
				</MudSelect>
			</MudItem>
			<MudItem xs="12" sm="3">
				<MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Variant="Variant.Outlined" Disabled="CannotAddAbility" OnClick="AddAbility" Style="@UI.Constants.Buttons.ButtonDimensionStyle">Ability</MudButton>
			</MudItem>
		</MudGrid>
		<MudStack>
			@foreach (var ability in KnownAbilities)
			{
				<SheetAbility Character="Character" Ability="ability" IsFixMode="IsFixMode" />
			}
		</MudStack>
	</MudStack>
</SheetCard>

@code
{
	[Parameter, EditorRequired]
	public Character Character { get; set; } = Character.Empty();

	[Parameter, EditorRequired]
	public GameSetting GameSetting { get; set; } = EmptyGameSetting.Game();

	Playbook Playbook => Character.Playbook;

	public bool IsFixMode { get; set; }

	IReadOnlyCollection<PlaybookSpecialAbility> KnownAbilities =>
		Playbook.Abilities;

	IReadOnlyCollection<PlaybookSpecialAbility> AvailableAbilities = Array.Empty<PlaybookSpecialAbility>();

	IReadOnlyCollection<PlaybookSpecialAbility> LearnableAbilities =>
		AvailableAbilities.Where
		(
			ability =>
			{
				if (!Playbook.AbilitiesByName.TryGetValue(ability.Name, out var knownAbility))
					return true;

				return !knownAbility.IsCompletelyLearned;
			}
		).ToArray();

	PlaybookSpecialAbility? SelectedAbility { get; set; }

	protected override void OnParametersSet()
	{
		AvailableAbilities = GameSetting.GetPlaybookSetting(Playbook.Name)
			.GetAvailableAbilities();
	}

	protected override void OnInitialized()
	{
		SheetJank.AbilitiesChanged += StateHasChanged;

		base.OnInitialized();
	}

	public void Dispose()
	{
		SheetJank.AbilitiesChanged -= StateHasChanged;
	}

	bool CanAddAbility =>
		IsFixMode || Playbook.Experience.CanLevelUp;

	bool CannotAddAbility =>
		!CanAddAbility;

	void AddAbility()
	{
		if (SelectedAbility == null)
			return;

		var success = Playbook.TakeAbility(SelectedAbility);

		if (!success)
			return;

		if (!IsFixMode)
			Playbook.Experience.Clear();

		SelectedAbility = null;
		SheetJank.NotifyAbilitiesChanged();
	}

	Func<PlaybookSpecialAbility?, string> converter = psa =>
		psa != null ? $"{psa.Name}: {psa.Description}"
			: string.Empty;
}