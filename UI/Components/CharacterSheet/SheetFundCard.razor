@using Models.Characters;
@using Models.Common;
@using UI.Services;
@inject SheetJank SheetJank;

<SheetCard @bind-IsFixMode="IsFixMode" Header="Fund">
	<MudGrid Style="align-items: end;">
		<MudItem xs="12">
			<MudStack Spacing="1">
				<MudText Typo="Typo.caption">Satchel: </MudText>
				<MudRating @bind-SelectedValue="Fund.Satchel.Coins" ReadOnly="!IsFixMode" MaxValue="Fund.Satchel.MaxCoins" FullIcon="@Icons.Material.Filled.Paid" EmptyIcon="@Icons.Material.Outlined.Paid" Color="Color.Primary" aria-label="@SatchelLabel" id="fund-satchel-rating" />
			</MudStack>
		</MudItem>
		<MudItem xs="12" lg="6">
			<MudNumericField @bind-Value="Fund.Stash.Stash" Label="Stash" Disabled="!IsFixMode" Min="Fund.Stash.MinCoins" Max="Fund.Stash.MaxCoins" id="fund-stash-coin" />
		</MudItem>
		<MudItem xs="6" lg="3">
			<MudText Typo="Typo.caption">Lifestyle:</MudText>
			<MudText Typo="Typo.body1">@Fund.Lifestyle.Description()</MudText>
		</MudItem>
		<MudItem xs="6" lg="3">
			<MudText Typo="Typo.caption">Rating:</MudText>
			<MudText Typo="Typo.body1">@Fund.Stash.Rating</MudText>
		</MudItem>
		<MudItem xs="12" lg="6">
			<MudNumericField @bind-Value="CoinChangeInput" Label="@CoinChangeInputLabel" Min="Fund.MinCoins" Max="InputMaximum" id="fund-coin-change" />
		</MudItem>
		<MudItem xs="12" lg="6">
			<MudButtonGroup Size="Size.Medium" Variant="Variant.Outlined" Style="width: 100%">
				<MudButton Disabled="!GainButtonEnabled" OnClick="() => Fund.Gain(CoinChangeInput)" Style="@ButtonStyle" Variant="Variant.Outlined">Gain</MudButton>
				<MudButton Disabled="!SpendButtonEnabled" OnClick="() => Fund.Spend(CoinChangeInput)" Style="@ButtonStyle" Variant="Variant.Outlined">Spend</MudButton>
			</MudButtonGroup>
		</MudItem>
	</MudGrid>
</SheetCard>

@code
{
	[Parameter, EditorRequired]
	public Fund Fund { get; set; } = new();

	[Parameter]
	public string CoinSynonym { get; set; } = Models.Settings.Constants.DefaultNames.Coin;

	bool IsFixMode { get; set; } = false;

	int CoinChangeInput { get; set; } = 0;

	string CoinChangeInputLabel => $"{CoinSynonym} to change";

	int InputMaximum => Math.Max(Fund.CoinSpaceRemaining, Fund.MaxAffordable);

	bool GainButtonEnabled => Fund.CanGain(CoinChangeInput) && CoinChangeInput > 0;

	bool SpendButtonEnabled => Fund.CanSpend(CoinChangeInput) && CoinChangeInput > 0;

	string ButtonStyle { get; } = Constants.Buttons.ButtonDimensionStyle + "width: 50%;";

	string SatchelLabel => $"{CoinSynonym} on hand";
}