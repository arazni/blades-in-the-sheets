@page "/"
@using Models.Characters
@using Models.Settings
@using Persistence.Json
@using System.Text
@using System.Linq
@using Persistence.Json.DataModels;
@using System.Collections.Immutable;
@using UI.Services
@using static Models.Settings.Constants;
@using static UI.Constants;
@inject IStorageService Storage
@inject IJSRuntime JS
@inject ILoader Loader
@inject NavigationManager Navigator

<MudContainer>
	<MudStack>
		<MudText Typo=Typo.h3 Style="margin: 20px 0;">@HeaderText</MudText>
		@foreach (var character in Characters)
		{
			<MudCard>
				<MudCardHeader>
					<CardHeaderContent>
						<MudLink Typo="Typo.h6" Href="@character.Link">@character.Alias the @character.Playbook</MudLink>
					</CardHeaderContent>
					<CardHeaderActions>
						<MudButton Color="Color.Tertiary" OnClick="_ => Download(character)" Variant="Variant.Filled" Style="@DownloadModeStyle">Export</MudButton>
						<MudButton Color="Color.Secondary" OnClick="_ => Delete(character.Id)" Variant="Variant.Filled" Style="@DeleteModeStyle">Delete</MudButton>
					</CardHeaderActions>
				</MudCardHeader>
				<MudCardContent>
					<MudStack>
						<MudText>@Blurb(character)</MudText>
					</MudStack>
				</MudCardContent>
			</MudCard>
		}
		<MudCard>
			<MudCardHeader>
				<CardHeaderContent>
					<MudText Typo="Typo.h6">Roster</MudText>
				</CardHeaderContent>
				<CardHeaderActions>
					@if (Characters.Any())
					{
						<MudToggleIconButton Color="Color.Tertiary" ToggledColor="Color.Secondary" @bind-Toggled="IsDownloadMode" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Download" ToggledIcon="@Icons.Material.Filled.FileDownloadOff" Title="Enable Download Mode" ToggledTitle="Disable Download Mode" />
						<MudToggleIconButton Color="Color.Tertiary" ToggledColor="Color.Secondary" @bind-Toggled="IsDeleteMode" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" ToggledIcon="@Icons.Material.Filled.Cancel" Title="Enable Delete Mode" ToggledTitle="Disable Delete Mode" />
					}
				</CardHeaderActions>
			</MudCardHeader>
			<MudCardContent>
				<MudStack>
					<MudSelect @bind-Value="SelectedGameFile" ToStringFunc="gameFile => gameFile.Name" Label="Select a Game"  Style="max-width: 215px;">
						@foreach (var gameFile in AvailableGameFiles)
						{
							<MudSelectItem T="GameFile" Value="gameFile">
								<MudText>@gameFile.Name</MudText>
							</MudSelectItem>
						}
					</MudSelect>
					<MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add" OnClick="New" Style="width: 215px;">Create a Character</MudButton>
					<MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept=".json">
						<ButtonTemplate>
							<MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Upload" for="@context" Style="width: 215px;">Import Characters</MudButton>
						</ButtonTemplate>
					</MudFileUpload>
				</MudStack>
			</MudCardContent>
		</MudCard>
	</MudStack>
</MudContainer>

@code
{
	IJSObjectReference? module;

	IReadOnlyCollection<VIndexCharacter> Characters { get; set; } = Array.Empty<VIndexCharacter>();

	GameFile[] AvailableGameFiles { get; set; } = Array.Empty<GameFile>();

	GameFile SelectedGameFile { get; set; } = new(Games.BladesInTheDark, Games.BladesInTheDarkStem);

	IReadOnlyDictionary<string, GameSetting> GameSettingsByName = ImmutableDictionary<string, GameSetting>.Empty;

	protected override async Task OnInitializedAsync()
	{
		await LoadCharacters();

		AvailableGameFiles = await Loader.LoadGameFiles();

		var gameSettingLoads = AvailableGameFiles.Select(gameFile => Loader.LoadSetting(gameFile));

		var gameSettings = await Task.WhenAll(gameSettingLoads);

		GameSettingsByName = gameSettings.ToImmutableDictionary
		(
			gameSetting => gameSetting.Name,
			gameSetting => gameSetting
		);

		await base.OnInitializedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
			module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Index.razor.js");

		await base.OnAfterRenderAsync(firstRender);
	}

	async Task LoadCharacters()
	{
		var characters = await Storage.LoadAll();

		if (!characters.Any())
			return;

		Characters = characters.Select(character => new VIndexCharacter(character))
			.OrderBy(c => (c.GameName, c.Alias))
			.ToArray();
	}

	string HeaderText => Characters.Any() ? "Your scoundrels await:"
		: "A Blades in the Dark Character Sheet App";

	bool IsDeleteMode { get; set; }

	bool IsDownloadMode { get; set; }

	string DownloadModeStyle => UI.Constants.Classes.Display(IsDownloadMode);

	string DeleteModeStyle => UI.Constants.Classes.Display(IsDeleteMode);

	string DeleteModeButtonText => IsDeleteMode ? "Cancel Delete Mode"
		: "Delete Mode";

	Color DeleteModeColor => IsDeleteMode ? Color.Tertiary
		: Color.Secondary;

	void ToggleDeleteMode() => IsDeleteMode = !IsDeleteMode;

	async Task Delete(string id)
	{
		await Storage.Delete(id);
		await LoadCharacters();
	}

	async Task Download(VIndexCharacter character)
	{
		var json = await Storage.GetFile(character.Id);
		var bytes = Encoding.Unicode.GetBytes(json);
		var memory = new MemoryStream(bytes);
		using var streamRef = new DotNetStreamReference(memory);

		await module!.InvokeVoidAsync("downloadFileFromStream", $"{character.Name} BitS.json", streamRef);
	}

	async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
	{
		foreach (var file in files)
		{
			var buffer = new byte[file.Size];
			await file.OpenReadStream().ReadAsync(buffer);
			var json = Encoding.Unicode.GetString(buffer);
			await Storage.PutFile(json);
		}

		await LoadCharacters();
	}

	void New() => Navigator.NavigateTo(Paths.NewCharacter(SelectedGameFile.Stem));

	string Blurb(VIndexCharacter vCharacter)
	{
		if (!GameSettingsByName.TryGetValue(vCharacter.GameName, out var gameSetting))
			return vCharacter.Blurb(EmptyGameSetting.Game());

		return vCharacter.Blurb(gameSetting);
	}
}