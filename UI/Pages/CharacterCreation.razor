@page "/new/{GameName}/{PlaybookName}"
@using Models.Characters
@using Models.Settings;
@using Persistence.Json;
@using UI.Components
@using UI.Components.NewCharacter
@using UI.Services
@using UI.ViewModels
@using static UI.Constants;
@inject IStorageService Storage
@inject ICharacterCoordinator Coordinator
@inject NavigationManager Navigator
@inject ILoader Loader

<MudStack>
	<NewCharacterHeritageCard HeritageSettings="GameSetting.Heritages" Heritage="@Character.Dossier.Heritage" />
	<NewCharacterBackgroundCard BackgroundSettings="GameSetting.Backgrounds" Background="@Character.Dossier.Background" />
	<NewCharacterActionDotsCard GameSetting="GameSetting" Character="@Character" />
	<NewCharacterSpecialAbilityCard PlaybookSetting="PlaybookSetting" Playbook="@Character.Playbook" />
	<NewCharacterFriendsCard RolodexSetting="PlaybookSetting.Rolodex" Rolodex="@Character.Rolodex" PlaybookName="@Character.Playbook.Name" />
	<NewCharacterViceCard ViceSettings="GameSetting.Vices" Vice="@Character.Dossier.Vice" />
	<NewCharacterIdentificationCard Dossier="@Character.Dossier" />
	<MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" FullWidth="true" OnClick="SaveAsync">
		Finish your scoundrel
	</MudButton>
</MudStack>

@code
{
	[Parameter]
	public string Id { get; set; } = string.Empty;

	[Parameter]
	public string GameName { get; set; } = string.Empty;

	[Parameter]
	public string PlaybookName { get; set; } = string.Empty;

	public Character Character { get; private set; } = Character.Empty();

	public GameSetting GameSetting { get; private set; } = EmptyGameSetting.Game();

	public PlaybookSetting PlaybookSetting => GameSetting.GetPlaybookSetting(Character.Playbook.Name);

	protected override async Task OnParametersSetAsync()
	{
		GameSetting = await Loader.LoadSettings(GameName);
		Character = Coordinator.InitializeCharacter(GameSetting, PlaybookName);

		await base.OnParametersSetAsync();
	}

	public async Task SaveAsync()
	{
		await Storage.Save(Character);
		Navigator.NavigateTo(Paths.Sheet(Character.Id));
	}
}
